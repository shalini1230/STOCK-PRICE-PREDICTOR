import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

# Step 1: Download stock data
stock = 'AAPL'  # You can change to 'TSLA', 'GOOGL', etc.
df = yf.download(stock, start='2015-01-01', end='2023-01-01')
data = df.filter(['Close'])

# Step 2: Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Step 3: Prepare training data
train_len = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_len]

X_train, y_train = [], []
for i in range(60, len(train_data)):
    X_train.append(train_data[i - 60:i, 0])
    y_train.append(train_data[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

# Step 4: Build the model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, batch_size=1, epochs=1)

# Step 5: Prepare testing data
test_data = scaled_data[train_len - 60:]
X_test, y_test = [], data[train_len:].values

for i in range(60, len(test_data)):
    X_test.append(test_data[i - 60:i, 0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Step 6: Predict and unscale
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Step 7: Compare actual vs predicted prices
compare_df = pd.DataFrame({
    'Actual Price': y_test.flatten(),
    'Predicted Price': predictions.flatten()
})

print("\nüîç Top 10: Actual vs Predicted Prices")
print(compare_df.head(10))

# Step 8: Plot the results
train = data[:train_len]
valid = data[train_len:]
valid['Predictions'] = predictions

plt.figure(figsize=(16, 6))
plt.title('Stock Price Prediction Using LSTM')
plt.xlabel('Date')
plt.ylabel('Stock Price (USD)')
plt.plot(train['Close'], label='Training Data')
plt.plot(valid[['Close', 'Predictions']], label=['Actual Price', 'Predicted Price'])
plt.legend()
plt.show()
